C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLOUDHANDLE
OBJECT MODULE PLACED IN .\Objects\CloudHandle.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\AlibabaCloud\CloudHandle.c OMF2 OPTIMIZE(9,SPEED) BROWSE MODP2 INCD
                    -IR(.\Code\Basic\def;.\Code\Basic\delay;.\Code\Basic\init;.\Code\Basic\uart;.\Code\Sensor\DS18B20;.\Code\Sensor\LCD1602;.
                    -\Code\AlibabaCloud;.\Code\Sensor\GY_25) DEBUG PRINT(.\Listings\CloudHandle.lst) OBJECT(.\Objects\CloudHandle.obj)

line level    source

   1          #include "CloudHandle.h"
   2          //------------------------------------------------------------------------------------------------//
   3          //CloudÈÎÎñ#×´Ì¬Ö¸Ê¾Æ÷
   4          xdata CloudActST CloudAct;
   5          //------------------------------------------------------------------------------------------------//
   6          //¸÷º¯Êı»º³åÇø
   7          static xdata uchar CloudReceiveBuffer[CloudReceiveBufferSize]; //´®¿ÚÊı¾İ´¦Àí»º³åÇø-CloudReceiveº¯Êı
   8          static xdata ushort CloudReceiveIdx;                           //´®¿ÚÊı¾İ´¦Àí»º³åÇøÏÂ±ê-CloudReceiveº¯Êı
   9          static data uchar CloudReceiveState = 0;                                           //½ÓÊÕ×´Ì¬-CloudReceiveº¯Êı
  10          static xdata uchar CloudSendBuffer[CloudSendBufferSize];       //Éú³ÉATÖ¸Áî»º³åÇø-CloudSendº¯Êı
  11          static xdata ushort CloudSendIdx;                              //Éú³ÉATÖ¸Áî»º³åÇøÏÂ±ê-CloudSendº¯Êı
  12          static xdata uchar CloudSendData[CloudSendDataSize];           //ÉÏ±¨Éè±¸ÊôĞÔ¼ÆËã»º³åÇø-CloudReportº¯Êı
  13          static xdata ushort CloudSendDataIdx;                          //¼ÇÂ¼»º³åÇøĞ´Èë´óĞ¡-CloudReportº¯Êı
  14          //------------------------------------------------------------------------------------------------//
  15          static void CloudReceive(void);       //½ÓÊÕ´®¿Ú»º³åÇøÊı¾İ
  16          static bool CloudSend(uchar);      //·¢ËÍÃüÁîµ½´®¿Ú
  17          static void CloudReSend(uchar);        //ÖØĞÂ·¢ËÍÃüÁî
  18          static bool CloudReport(uchar);  //Éè±¸ÉÏ±¨
  19          static void CloudHandleReceive(void); //´¦ÀíCloudReceiveÊÕµ½µÄÒ»ÌõWiFiĞÅÏ¢
  20          //------------------------------------------------------------------------------------------------//
  21          void CloudLoop(void) //CloudÖ÷Ñ­»·
  22          {
  23   1          //-----------------------------WiFiÁ¬½ÓÀàÈÎÎñÈÎÎñ-----------------------------//
  24   1              if(CloudAct.DisConectWiFi==false)//WiFiÊÇ·ñÎª¿ÉÓÃ×´Ì¬
  25   1              {
  26   2                      CloudReceive(); //##½ÓÊÕ²¢´¦Àí´®¿Ú»º³åÇøÊı¾İ
  27   2                      CloudReSend(6); //##µÈ´ı»Ø¸´600ms³¬Ê±,ÖØĞÂ·¢ËÍÃüÁî
  28   2                      //------#»ã±¨ÊÂ¼ş------//
  29   2                      if (CloudAct.NeedReport_Event_1 == true && CloudReport(1) == EXIT_SUCCESS)
  30   2                              CloudAct.NeedReport_Event_1 = false;
  31   2                      if (CloudAct.NeedReport_Event_2 == true && CloudReport(2) == EXIT_SUCCESS)
  32   2                              CloudAct.NeedReport_Event_2 = false;
  33   2                      //------#»ã±¨²ÎÊı------//
  34   2                      if (CloudAct.NeedReport == true && CloudReport(0) == EXIT_SUCCESS)
  35   2                              CloudAct.NeedReport = false,memset(&CloudAct.NeedReportT,0,sizeof(CloudAct.NeedReportT));
  36   2                      //------#Ó¦´ğ·şÎñ------//
  37   2                      if (CloudAct.NeedReport_Service1 == true && CloudReport(200) == EXIT_SUCCESS)
  38   2                              CloudAct.NeedReport_Service1 = false;
  39   2                      if (CloudAct.NeedReport_Service2 == true && CloudReport(201) == EXIT_SUCCESS)
  40   2                              CloudAct.NeedReport_Service2 = false;
  41   2                      if (CloudAct.NeedReport_Service3 == true && CloudReport(202) == EXIT_SUCCESS)
  42   2                              CloudAct.NeedReport_Service3 = false;
  43   2              }
  44   1              //--------------------------------Ö´ĞĞ·şÎñÀàÈÎÎñ-------------------------------//
  45   1              if(CloudAct.ServiceMCUOffline == true||CloudAct.ServiceMCURst == true)
  46   1              {
  47   2                      static bool issend = false;
  48   2                      if(CloudAct.NeedAns==false && issend == false)//*²»ÔÚµÈ´ıÓ¦´ğ×´Ì¬*,ÇÒÖ´ĞĞÒ»´Î
  49   2                      {
  50   3                              CloudAct.Cmd = AT_MQTTCLOSE;
  51   3                              if(CloudSend(2)==EXIT_SUCCESS)
  52   3                                      issend = true;
  53   3                      }
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 2   

  54   2                      if(CloudAct.DisConectWiFi == true)//ÒÑÀëÏß
  55   2                      {
  56   3                              CloudAct.ServiceMCUOffline=false;//Íê³ÉMCUÀëÏßÈÎÎñ
  57   3                              if(CloudAct.ServiceMCURst == true)//Ö´ĞĞÖØÆôMCUÈÎÎñ
  58   3                              {
  59   4      #if LOGRANK_UART1 >= 2
                      printf("LOG#:CloudLoop Service:MCURST!\r\n"); //ÈÕÖ¾¼ÇÂ¼½«»áÖØÆôMCU
              #endif
  62   4                                      MCURST();
  63   4                              }
  64   3                      }
  65   2              }
  66   1              //--------------------------------×ÓÉè±¸ÀàÈÎÎñ---------------------------------//
  67   1              //------´«¸ĞÆ÷¶ÁÊı------//
  68   1          if (CloudAct.NeedReadDS18B20 == true 
  69   1                      && CloudAct.SysTime - CloudAct.NeedReadDS18B20_Ms >= DS18B20ConvertTMaxTime[DS18B20ST.ResolutionMode]
  70   1                      && DS18B20GetTemperature() == EXIT_SUCCESS)//ĞèÒª¶ÁÈ¡DS18B20ÎÂ¶ÈÖµ
  71   1                      CloudAct.NeedReadDS18B20 = false,CloudAct.NeedReadDS18B20_Ms = CloudAct.SysTime;
  72   1              if(CloudAct.NeedReadGY_25 == true && GY_25GetAzimuth() == EXIT_SUCCESS)//ÒÑ·¢ËÍ²éÑ¯Ö¸Áî,¿ªÊ¼¶ÁÈ¡·½Î»½ÇÊı¾
             -İ
  73   1                      CloudAct.NeedReadGY_25 = false, CloudAct.NeedReadGY_25_Ms = CloudAct.SysTime;//¶ÁÈ¡³É¹¦
  74   1              //------´«¸ĞÆ÷×¼±¸------//
  75   1          if (CloudAct.NeedReadDS18B20 == false && CloudAct.SysTime - CloudAct.NeedReadDS18B20_Ms >= DS18B20Need
             -ReadMs 
  76   1                      && DS18B20ConvertTemperature() == EXIT_SUCCESS) //ĞèÒª¿ªÊ¼ÎÂ¶È×ª»»
  77   1              CloudAct.NeedReadDS18B20 = true, CloudAct.NeedReadDS18B20_Ms = CloudAct.SysTime;
  78   1              if(CloudAct.NeedReadGY_25 == false && CloudAct.SysTime - CloudAct.NeedReadGY_25_Ms >= GY_25NeedReadMs 
  79   1                      && GY_25SetCmd(GY_25Query) == EXIT_SUCCESS)//·¢ËÍ²éÑ¯Ö¸Áî
  80   1                      CloudAct.NeedReadGY_25 = true;
  81   1      }
  82          void CloudInit(void) //³õÊ¼»¯Cloud
  83          {
  84   1          memset(&CloudAct, 0, sizeof(CloudAct));                //ÇåÁãÈÎÎñÖ¸Ê¾Æ÷
  85   1          CloudSendDataIdx = CloudSendIdx = CloudReceiveIdx = 0; //¸÷»º³åÇøÏÂ±êÇåÁã
  86   1      //------------------------------------------------//
  87   1          CloudAct.Cmd = AT_REBOOT; //ÖØÆôÄ£×é
  88   1          CloudSend(2);
  89   1          while (CloudAct.NeedAns == true)
  90   1          {
  91   2              CloudReceive();
  92   2                      CloudReSend(20);//2,000msµÈ´ı
  93   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
  94   2                      {
  95   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
  96   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
  99   3                              return;
 100   3                      }
 101   2          }
 102   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-Reboot ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Ä£¿éÖØÆôÍê±Ï
              #endif
 105   1      //------------------------------------------------//
 106   1          CloudAct.Cmd = AT_WJAPQ; //¶Ï¿ªµ±Ç°WiFiÁ¬½Ó
 107   1          CloudSend(2);
 108   1          while (CloudAct.NeedAns == true)
 109   1          {
 110   2              CloudReceive();
 111   2                      CloudReSend(30);//3,000msµÈ´ı
 112   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 113   2                      {
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 3   

 114   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 115   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 118   3                              return;
 119   3                      }
 120   2          }
 121   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-WiFiDisConect ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Ä£¿é¶Ï¿ªµ±Ç°WiFiÁ¬½Ó
              #endif
 124   1      //------------------------------------------------//
 125   1          CloudAct.Cmd = AT_WJAP; //Á¬½ÓÄ¿±êWiFi
 126   1          CloudSend(0);
 127   1          while (CloudAct.NeedAns == true)
 128   1          {
 129   2              CloudReceive();
 130   2                      CloudReSend(150);//15,000msµÈ´ı
 131   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 132   2                      {
 133   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 134   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 137   3                              return;
 138   3                      }
 139   2          }
 140   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-WiFiConect ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Ä¿±êWiFiÒÑÁ¬½Ó
              #endif
 143   1      //------------------------------------------------//
 144   1          CloudAct.Cmd = AT_MQTTAUTH; //ÉèÖÃMQTTÓÃ»§ÃûÃÜÂë
 145   1          CloudSend(0);
 146   1          while (CloudAct.NeedAns == true)
 147   1          {
 148   2              CloudReceive();
 149   2                      CloudReSend(22);//2,200msµÈ´ı
 150   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 151   2                      {
 152   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 153   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 156   3                              return;
 157   3                      }
 158   2          }
 159   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_UserSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÓÃ»§ÃûºÍÃÜÂëÉèÖÃÍê±Ï
              #endif
 162   1      //------------------------------------------------//
 163   1          CloudAct.Cmd = AT_MQTTSOCK; //ÉèÖÃMQTTÖ÷»úºÍ¶Ë¿Ú
 164   1          CloudSend(0);
 165   1          while (CloudAct.NeedAns == true)
 166   1          {
 167   2              CloudReceive();
 168   2                      CloudReSend(22);//2,200msµÈ´ı
 169   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 170   2                      {
 171   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 172   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 175   3                              return;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 4   

 176   3                      }
 177   2          }
 178   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_HostSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÖ÷»úºÍ¶Ë¿ÚÉèÖÃÍê±Ï
              #endif
 181   1      //------------------------------------------------//
 182   1          CloudAct.Cmd = AT_MQTTCID; //ÉèÖÃMQTT¿Í»§¶ËID
 183   1          CloudSend(0);
 184   1          while (CloudAct.NeedAns == true)
 185   1          {
 186   2              CloudReceive();
 187   2                      CloudReSend(22);//2,200msµÈ´ı
 188   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 189   2                      {
 190   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 191   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 194   3                              return;
 195   3                      }
 196   2          }
 197   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_ClintIDSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¿Í»§¶ËIDÉèÖÃÍê±Ï
              #endif
 200   1      //------------------------------------------------//
 201   1          CloudAct.Cmd = AT_MQTTKEEPALIVE; //ÉèÖÃMQTTĞÄÌøÖÜÆÚ
 202   1          CloudSend(0);
 203   1          while (CloudAct.NeedAns == true)
 204   1          {
 205   2              CloudReceive();
 206   2                      CloudReSend(22);//2,200msµÈ´ı
 207   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 208   2                      {
 209   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 210   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 213   3                              return;
 214   3                      }
 215   2          }
 216   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_HeartSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTĞÄÌøÊ±¼äÉèÖÃÍê±Ï
              #endif
 219   1      //------------------------------------------------//
 220   1          CloudAct.Cmd = AT_MQTTRECONN; //ÉèÖÃMQTTÊÇ·ñ×Ô¶¯ÖØÁ¬
 221   1          CloudSend(0);
 222   1          while (CloudAct.NeedAns == true)
 223   1          {
 224   2              CloudReceive();
 225   2                      CloudReSend(22);//2,200msµÈ´ı
 226   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 227   2                      {
 228   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 229   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 232   3                              return;
 233   3                      }
 234   2          }
 235   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_AutoReConect Set ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT×Ô¶¯ÖØÁ¬ÉèÖÃÍê±Ï
              #endif
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 5   

 238   1      //------------------------------------------------//
 239   1          CloudAct.Cmd = AT_MQTTAUTOSTART; //ÉèÖÃMQTTÊÇ·ñÉÏµç×Ô¶¯¿ªÆô
 240   1          CloudSend(0);
 241   1          while (CloudAct.NeedAns == true)
 242   1          {
 243   2              CloudReceive();
 244   2                      CloudReSend(22);//2,200msµÈ´ı
 245   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 246   2                      {
 247   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 248   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 251   3                              return;
 252   3                      }
 253   2          }
 254   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_AutoStartSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÉÏµç×Ô¶¯¿ªÆôÉèÖÃÍê±Ï
              #endif
 257   1      //------------------------------------------------//
 258   1          CloudAct.Cmd = AT_MQTTSTART; //¿ªÆôMQTT
 259   1          CloudSend(2);
 260   1          while (CloudAct.NeedAns == true)
 261   1          {
 262   2              CloudReceive();
 263   2                      CloudReSend(40);//4,000msµÈ´ı
 264   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 265   2                      {
 266   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 267   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 270   3                              return;
 271   3                      }
 272   2          }
 273   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_Start ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¿ªÆô³É¹¦
              #endif
 276   1      //------------------------------------------------//
 277   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-·şÎñ1,SubCode=2
 278   1          CloudAct.SubCode = 2;
 279   1          CloudSend(0);
 280   1          while (CloudAct.NeedAns == true)
 281   1          {
 282   2              CloudReceive();
 283   2                      CloudReSend(22);//2,200msµÈ´ı
 284   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 285   2                      {
 286   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 287   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 290   3                              return;
 291   3                      }
 292   2          }
 293   1              CloudAct.SubisBusy|=0x04;       //2ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 294   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Service1 ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄ·şÎñ1³É¹¦
              #endif
 297   1      //------------------------------------------------//
 298   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-·şÎñ2,SubCode=3
 299   1          CloudAct.SubCode = 3;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 6   

 300   1          CloudSend(0);
 301   1          while (CloudAct.NeedAns == true)
 302   1          {
 303   2              CloudReceive();
 304   2                      CloudReSend(22);//2,200msµÈ´ı
 305   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 306   2                      {
 307   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 308   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 311   3                              return;
 312   3                      }
 313   2          }
 314   1              CloudAct.SubisBusy|=0x08;       //3ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 315   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Service2 ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄ·şÎñ2³É¹¦
              #endif
 318   1      //------------------------------------------------//
 319   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-·şÎñ3,SubCode=4
 320   1          CloudAct.SubCode = 4;
 321   1          CloudSend(0);
 322   1          while (CloudAct.NeedAns == true)
 323   1          {
 324   2              CloudReceive();
 325   2                      CloudReSend(22);//2,200msµÈ´ı
 326   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 327   2                      {
 328   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 329   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 332   3                              return;
 333   3                      }
 334   2          }
 335   1              CloudAct.SubisBusy|=0x10;       //4ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 336   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Service3 ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄ·şÎñ3³É¹¦
              #endif
 339   1      //------------------------------------------------//
 340   1          CloudAct.Cmd = AT_MQTTPUB; //ÉèÖÃMQTT·¢²¼-Ä¬ÈÏÎª²ÎÊı·¢²¼PubCode=0
 341   1          CloudAct.PubCode_t = 0;
 342   1          CloudSend(0);
 343   1          while (CloudAct.NeedAns == true)
 344   1          {
 345   2              CloudReceive();
 346   2                      CloudReSend(22);//2,200msµÈ´ı
 347   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 348   2                      {
 349   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 350   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 353   3                              return;
 354   3                      }
 355   2          }
 356   1          //------------------------------------------------//
 357   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Íê±Ï
              #endif
 360   1      }
 361          //------------------------------------------------------------------------------------------------//
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 7   

 362          static void CloudReceive(void) //½ÓÊÕ´®¿Ú»º³åÇøÊı¾İ
 363          {
 364   1          data ushort idx1 = uart2Idx1, idx2 = uart2Idx2;
 365   1          while (idx1 != idx2)
 366   1          {
 367   2              switch (CloudReceiveState)
 368   2              {
 369   3              case 0: //µÈ´ıÖĞ
 370   3                  if (uart2Buffer[idx1] == 0x0A)
 371   3                      CloudReceiveState = 1; //µÈ´ı/r
 372   3                  break;
 373   3              case 1:                             //¶ÁÈ¡ÖĞ
 374   3                  if (uart2Buffer[idx1] == 0x0D) //·¢ÏÖ\n,½áÊø¶ÁÈ¡,ÓÉCloudHandleReceiveº¯Êı´¦Àí
 375   3                  {
 376   4                      if (CloudReceiveIdx >= 2)                      //ÃüÁî¿ÕÏ¶,»Øµ½State=1;
 377   4                      {                                              //###´Ë´¦¾ö¶¨¹ıÂË³¤¶È²»×ã2µÄÃüÁî,Ö÷ÒªÕë¶ÔMQ
             -TTSENDµÄ>
 378   5                          CloudReceiveBuffer[CloudReceiveIdx++] = 0; //·ÅÖÃ×Ö·û´®Ä©Î²,·½±ã´¦Àí
 379   5                          CloudHandleReceive();                      //´¦ÀíÊÕµ½µÄĞÅÏ¢
 380   5                      }
 381   4                      CloudReceiveState = 0; //¿ªÊ¼ĞÂµÄ½ÓÊÕ
 382   4                      CloudReceiveIdx = 0;
 383   4                      CloudReceiveBuffer[0] = 0;
 384   4                  }
 385   3                  else
 386   3                      CloudReceiveBuffer[CloudReceiveIdx++] = uart2Buffer[idx1];
 387   3                              break;
 388   3              }
 389   2              if (idx1 + 1 == uart2_buffer_size)
 390   2                  idx1 = 0;
 391   2              else
 392   2                  ++idx1;
 393   2              uart2Idx1 = idx1;
 394   2          }
 395   1      }
 396          static bool CloudSend(uchar op) //·¢ËÍÃüÁîµ½´®¿Ú
 397          {
 398   1          pdata uchar i = 0;
 399   1          if (CloudAct.NeedAns||CloudAct.DisConectWiFi==true) //ÉĞÓĞĞÅÏ¢Î´Ó¦´ğ»òÁ¬½ÓÒÑ¶Ï¿ª
 400   1              return EXIT_FAILURE;
 401   1          CloudSendIdx = sprintf(CloudSendBuffer, "AT+%s", ATCmd[CloudAct.Cmd]);
 402   1          switch (op)
 403   1          {
 404   2          case 0: //ÉèÖÃ²ÎÊı
 405   2              switch (CloudAct.Cmd)
 406   2              {
 407   3              case AT_MQTTAUTH:
 408   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s,%s\r", MQTTUser, MQTTPassword);
 409   3                  break;
 410   3              case AT_MQTTSOCK:
 411   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s,%s\r", MQTTHost, MQTTPort);
 412   3                  break;
 413   3              case AT_MQTTCID:
 414   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTClientID);
 415   3                  break;
 416   3              case AT_MQTTKEEPALIVE:
 417   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTHeartBeat);
 418   3                  break;
 419   3              case AT_MQTTRECONN:
 420   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTAutoReConect);
 421   3                  break;
 422   3              case AT_MQTTAUTOSTART:
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 8   

 423   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTAutoStart);
 424   3                  break;
 425   3              case AT_MQTTSUB:
 426   3                      {
 427   4                              pdata uchar *P;
 428   4                              switch(CloudAct.SubCode)
 429   4                              {
 430   5                              case 2://¶©ÔÄÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ1
 431   5                                      P=Service_1;break;
 432   5                              case 3://¶©ÔÄÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ2
 433   5                                      P=Service_2;break;
 434   5                              case 4://¶©ÔÄÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ3
 435   5                                      P=Service_3;break;
 436   5                              }
 437   4                              sprintf(CloudSendBuffer + CloudSendIdx, "=" SubscribeSet4 "\r",
 438   4                                      CloudAct.SubCode,ProductKey, DeviceName,P);
 439   4                      }
 440   3                  break;
 441   3              case AT_MQTTPUB:
 442   3                  switch (CloudAct.PubCode_t) //Ä¿±êPub
 443   3                  {
 444   4                  case 0: //Éè±¸ÊôĞÔÉÏ±¨
 445   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet1 "\r",ProductKey, DeviceName);
 446   4                      break;
 447   4                  case 1: //Éè±¸ÊÂ¼şÉÏ±¨,Event_1:WaterTemperatureLow
 448   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet2 "\r",ProductKey, DeviceName, Event
             -_1);
 449   4                      break;
 450   4                  case 2: //Éè±¸ÊÂ¼şÉÏ±¨,Event_2:WaterTemperatureHigh
 451   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet2 "\r",ProductKey, DeviceName, Event
             -_2);
 452   4                      break;
 453   4                  case 200://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ1,Service_1:LCD1602Display
 454   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet3 "\r",ProductKey, DeviceName, Servi
             -ce_1);
 455   4                      break;
 456   4                              case 201://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ2,Service_2:GY25Correction
 457   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet3 "\r",ProductKey, DeviceName, Servi
             -ce_2);
 458   4                      break;
 459   4                              case 202://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ3,Service_3:MCUControl
 460   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet3 "\r",ProductKey, DeviceName, Servi
             -ce_3);
 461   4                      break;
 462   4                  }
 463   3                  break;
 464   3              case AT_MQTTSEND:
 465   3                  switch (CloudAct.PubCode) //µ±Ç°Pub
 466   3                  {
 467   4                  case 0: //Éè±¸ÊôĞÔÉÏ±¨
 468   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet1 "\r",
 469   4                              SendSet1Len + CloudSendDataIdx, CloudAct.MQTTSENDid, CloudSendData);
 470   4                      break;
 471   4                  case 1: //Éè±¸ÊÂ¼şÉÏ±¨,Event_1:WaterTemperatureLow
 472   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet2 "\r",
 473   4                              SendSet2Len + Event_1_Len + CloudSendDataIdx, CloudAct.MQTTSENDid, CloudSendData, 
             -Event_1);
 474   4                      break;
 475   4                  case 2: //Éè±¸ÊÂ¼şÉÏ±¨,Event_2:WaterTemperatureHigh
 476   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet2 "\r",
 477   4                              SendSet2Len + Event_2_Len + CloudSendDataIdx, CloudAct.MQTTSENDid, CloudSendData, 
             -Event_2);
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 9   

 478   4                      break;
 479   4                              case 200://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ1,Service_1:LCD1602Display
 480   4                              case 201://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ2,Service_2:GY25Correction
 481   4                              case 202://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ3,Service_3:MCUControl
 482   4                                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet3 "\r",
 483   4                              SendSet3Len + CloudAct.SubIdLen + CloudSendDataIdx,
 484   4                                                      CloudAct.SubId,CloudAct.NeedReport_ServiceReCode,CloudSendData);
 485   4                                      break;
 486   4                  }
 487   3                              if(CloudAct.PubCode<200)//·ÇÏìÓ¦·şÎñµ÷ÓÃ
 488   3                                      ++CloudAct.MQTTSENDid;//±¾µØidºÅ¸üĞÂ
 489   3                  break; //MQTTSEND
 490   3              case AT_WJAP:
 491   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s,%s\r", WiFiSSID, WiFiPassword);
 492   3                  break;
 493   3              default:
 494   3                  break;
 495   3              }
 496   2              break;
 497   2          case 3:
 498   2              CloudSendBuffer[CloudSendIdx++] = '='; //²éÑ¯ÓÃ»§ÉèÖÃµÄ²ÎÊı
 499   2          case 1:
 500   2              CloudSendBuffer[CloudSendIdx++] = '?'; //²éÑ¯ÏµÍ³²ÎÊı
 501   2          case 2:
 502   2              CloudSendBuffer[CloudSendIdx++] = '\r'; //Ö´ĞĞÃüÁî
 503   2              CloudSendBuffer[CloudSendIdx++] = 0;
 504   2              break;
 505   2          }
 506   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudSend$%s\r\n", CloudSendBuffer);
              #endif
 509   1          uart2_sendstr8(CloudSendBuffer);       //·¢ËÍ×¼±¸ºÃµÄÃüÁî×Ö·û´®
 510   1          CloudAct.NeedAns = true;                  //¿ªÊ¼µÈ´ıÓ¦´ğ
 511   1          CloudAct.NeedAns_Time = CloudAct.SysTime; //¼ÇÂ¼·¢ËÍÃüÁîÊ±¼ä
 512   1              CloudAct.NeedAns_Count = 0;
 513   1          return EXIT_SUCCESS;
 514   1      }
 515          static void CloudReSend(uchar Time)
 516          {
 517   1              xdata ulong Timex=Time;
 518   1              Timex*=100;
 519   1              if(CloudAct.NeedAns==false || CloudAct.DisConectWiFi==true)//²»ÊÇµÈ´ıÓ¦´ğ×´Ì¬»òÁ¬½ÓÒÑ¶Ï¿ª
 520   1                      return;
 521   1              if(CloudAct.SysTime-CloudAct.NeedAns_Time>=Timex)//µÈ´ıÓ¦´ğ³¬Ê±
 522   1              {
 523   2                      if(CloudAct.NeedAns_Count==2)//ÒÑ¾­ÖØĞÂ·¢ËÍÁ½´Î
 524   2                      {
 525   3                              CloudAct.NeedAns=false;//·ÅÆúÖØĞÂ·¢ËÍ,È¡ÏûµÈ´ıÓ¦´ğ×´Ì¬
 526   3                              ++CloudAct.NeedAns_FailCount;
 527   3      #if LOGRANK_UART1 >= 2
                      printf("LOG#:CloudReSend abandon,FailCount:%bu\r\n",CloudAct.NeedAns_FailCount);
              #endif
 530   3                              if(CloudAct.NeedAns_FailCount==3)//Ê§°Ü3´Î,¿ªÊ¼ÑéÖ¤Ä£×éÊÇ·ñÔÚÏß
 531   3                              {
 532   4                                      ushort TempT;
 533   4      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend check WiFi isOnline?\r\n");
              #endif
 536   4                                      CloudAct.Cmd = 0xFF;//·ÀÖ¹×èÈûok
 537   4                                      uart2_sendstr8("\rAT\r");//·¢ËÍATÑéÖ¤
 538   4                                      TempT = CloudAct.SysTime; //¼ÇÂ¼ÃüÁî·¢ËÍÊ±¼ä
 539   4                                      CloudAct.NeedAns=true;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 10  

 540   4                                      while (CloudAct.NeedAns == true)
 541   4                                      {
 542   5                                              CloudReceive();
 543   5                                              if (CloudAct.SysTime - TempT >= 3500) //3500msÃ»ÓĞ»Ø¸´
 544   5                                              {
 545   6      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend check WiFi isOnline - No,DisConect Now\r\n");
              #endif
 548   6                                                      CloudAct.DisConectWiFi=true;
 549   6                                                      IE2 &= ~ES2;//¹Ø±Õ´®¿Ú2ÖĞ¶Ï
 550   6                                                      return;//Ä£×é¶Ï¿ªÁ¬½Ó,²»ÔÙÁ¬½ÓÄ£×é
 551   6                                              }
 552   5                                      }
 553   4      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend check WiFi isOnline - Yes,Restart MCU\r\n");
              #endif
 556   4                                      MCURST();//Í¨¹ıÑéÖ¤,ÖØÆôMCUÊÔÍ¼ÖØĞÂÆ¥ÅäÄ£×é×´Ì¬
 557   4                              }
 558   3                      }
 559   2                      else
 560   2                      {
 561   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend$%s,Cnt$%bu\r\n", CloudSendBuffer,CloudAct.NeedAns_Count+1);
              #endif
 564   3                              uart2_sendstr8(CloudSendBuffer);//ÖØĞÂ·¢ËÍ
 565   3                              CloudAct.NeedAns_Time = CloudAct.SysTime;//¸üĞÂ·¢ËÍÊ±¼ä
 566   3                              ++CloudAct.NeedAns_Count;//¼ÆÊıÖØĞÂ·¢ËÍ´ÎÊı
 567   3                      }
 568   2              }
 569   1      }
 570          static bool CloudReport(uchar Code) //Éè±¸ÉÏ±¨
 571          {
 572   1          if (CloudAct.NeedAns||CloudAct.DisConectWiFi==true) //ÉĞÓĞĞÅÏ¢Î´Ó¦´ğ,»òÄ£×é¶Ï¿ª×´Ì¬
 573   1              return EXIT_FAILURE;
 574   1          if (Code == 0)
 575   1          {
 576   2              if (CloudAct.PubCode != 0) //PubÎ´ÕıÈ·ÇĞ»»,ÇĞ»»ºó·µ»Ø
 577   2              {
 578   3                  if (CloudAct.PubCode_t != 0) //PubÎ´¿ªÊ¼¿ªÊ¼ÇĞ»»µ½Pub=0
 579   3                  {
 580   4                      CloudAct.Cmd = AT_MQTTPUB;
 581   4                      CloudAct.PubCode_t = 0; //±êÖ¾ÒÑ¾­¿ªÊ¼ÇĞ»»
 582   4                      CloudSend(0);           //ÇĞ»»µ½Éè±¸ÊôĞÔPub
 583   4                  }
 584   3                  return EXIT_FAILURE;
 585   3              }
 586   2                      CloudSendDataIdx = 0;
 587   2                      if(CloudAct.NeedReportT.GY_25)
 588   2                              CloudSendDataIdx += sprintf(CloudSendData, "\"HeadAngle\":%.2f,\"PitchAngle\":%.2f,\"RollAngle\":%.2f",
 589   2                              GY_25ST.HeadAngle/100.0,GY_25ST.PitchAngle/100.0,GY_25ST.RollAngle/100.0);
 590   2                      if(CloudAct.NeedReportT.DS18B20)
 591   2                      {
 592   3                              if(CloudSendDataIdx)
 593   3                                      CloudSendData[CloudSendDataIdx++]=',';
 594   3                              CloudSendDataIdx += sprintf(CloudSendData, "\"WaterTemperature\":%.3f",
 595   3                                         (DS18B20ST.TemperatureData) * DS18B20ReTransfrom[DS18B20ST.ResolutionMo
             -de] + (float)DS18B20MinT);
 596   3                      }
 597   2              }
 598   1          else
 599   1          {
 600   2              if (CloudAct.PubCode != Code) //PubÎ´ÕıÈ·ÇĞ»»
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 11  

 601   2              {
 602   3                              pdata uchar TempFailCount = CloudAct.NeedAns_FailCount;
 603   3                  CloudAct.Cmd = AT_MQTTPUB;
 604   3                  CloudAct.PubCode_t = Code;       //±êÖ¾ÒÑ¾­¿ªÊ¼ÇĞ»»
 605   3                  CloudSend(0);                    //ÇĞ»»µ½Éè±¸ÊôĞÔPub
 606   3                  while (CloudAct.NeedAns == true)
 607   3                              {
 608   4                                      CloudReceive();
 609   4                                      CloudReSend(5);//500msµÈ´ı
 610   4                                      if(CloudAct.NeedAns_FailCount==TempFailCount+1)//CloudReSend·ÅÆú·¢ËÍ
 611   4                                              return EXIT_FAILURE;//Pub×ª»»Ê§°Ü
 612   4                              }
 613   3              }
 614   2              switch (Code)
 615   2              {
 616   3              case 1://Éè±¸ÊÂ¼şÉÏ±¨,Event_1:WaterTemperatureLow
 617   3                  CloudSendDataIdx = sprintf(CloudSendData, "\"Error\":%bu",DS18B20ST.TemperatureLow);break;
 618   3              case 2://Éè±¸ÊÂ¼şÉÏ±¨,Event_2:WaterTemperatureHigh
 619   3                  CloudSendDataIdx = sprintf(CloudSendData, "\"Error\":%bu",DS18B20ST.TemperatureHigh);break;
 620   3                      case 200://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ1,Service_1:LCD1602Display
 621   3                      case 201://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ2,Service_2:GY25Correction
 622   3                      case 202://ÉèÖÃÏìÓ¦·şÎñµ÷ÓÃ3,Service_3:MCUControl       
 623   3                              CloudSendDataIdx = sprintf(CloudSendData, "");//Ã»ÓĞ·µ»Ø²ÎÊı
 624   3                  break;
 625   3              }
 626   2          }
 627   1          CloudAct.Cmd = AT_MQTTSEND; //ÒÑĞ´ÈëÉè±¸´ıÉÏ±¨ÊôĞÔ,×¼±¸·¢²¼
 628   1          CloudSend(0);
 629   1          return EXIT_SUCCESS;
 630   1      }
 631          static void CloudHandleReceive(void)
 632          {
 633   1      #if LOGRANK_UART1 >= 3
                  printf("LOG:HandleReceive$%s\r\n", CloudReceiveBuffer);
              #endif
 636   1          if (strncmp(CloudReceiveBuffer, "ERROR", 5) == 0) //ÃüÁîÖ´ĞĞÒì³£
 637   1          {
 638   2              //Ä¿Ç°²»´¦Àí,´ıÍêÉÆ
 639   2          }
 640   1          else if (strncmp(CloudReceiveBuffer, "OK", 2) == 0) //ÃüÁîÖ´ĞĞÕı³£
 641   1          {
 642   2              if (CloudAct.Cmd != AT_MQTTSTART && CloudAct.Cmd != AT_MQTTSEND 
 643   2                              && CloudAct.Cmd != AT_MQTTSUB && CloudAct.Cmd != AT_WJAP
 644   2                              && CloudAct.Cmd != AT_MQTTCLOSE)
 645   2              {
 646   3                  CloudAct.NeedAns = false;
 647   3                  if (CloudAct.Cmd == AT_MQTTPUB)
 648   3                      CloudAct.PubCode = CloudAct.PubCode_t; //ÇĞ»»PubÍê±Ï
 649   3              }
 650   2          }
 651   1          else if (CloudReceiveBuffer[0] == '+') //¶ÁÈ¡ÏêÏ¸ĞÅÏ¢
 652   1          {
 653   2              if (strncmp(CloudReceiveBuffer + 1, "MQTTRECV", 8) == 0) //ÊÕµ½¶©ÔÄĞÅÏ¢
 654   2              {
 655   3                              pdata uchar *P=CloudReceiveBuffer+16;//´ÓÕâÀï¿ªÊ¼²éÕÒidºÍparams
 656   3                              pdata uchar i=0;
 657   3                              P=strstr(P,"\"id\":\""),P+=6;
 658   3                              while(*P!='"')  //Ñ¡ÓÃ"×÷Îª½áÊø±êÖ¾
 659   3                                      CloudAct.SubId[i++]=*P++;
 660   3                              CloudAct.SubIdLen=i;
 661   3                  switch (CloudReceiveBuffer[10]) //ÅĞ¶Ï¶©ÔÄµÄÍ¨µÀ
 662   3                  {
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 12  

 663   4                  case '0': //ÔÆ¶ËÏìÓ¦ÊôĞÔÉÏ±¨,ÔÆ¶ËÏìÓ¦ÊÂ¼şÉÏ±¨-³£±ÕÍ¨µÀ
 664   4                      break;
 665   4                  case '1': //ÔÆ¶ËÉèÖÃÉè±¸ÊôĞÔ
 666   4                      break;
 667   4                  case '2': //ÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ:1,Service_1:LCD1602Display
 668   4                              {
 669   5                                      pdata uchar *Pend=strstr(P,"},\"version\":\"1.0.0\"}");//ÕÒÑ°Ä©Î²}
 670   5                                      bool isRow2;
 671   5                                      pdata uchar str[17]="                ",readcnt=0;//±£Ö¤16¸ö×Ö·û,Ë¢ĞÂÊ£Óà²¿·ÖÎª¿Õ°×
 672   5                                      P=strstr(P,"\"params\":{"),P+=10;
 673   5                                      while(P!=Pend)
 674   5                                      {
 675   6                                              ++P;//Ìø¹ı"
 676   6                                              if(strncmp(P,"Text",4)==0)
 677   6                                              {
 678   7                                                      pdata uchar i=0;
 679   7                                                      P+=7;
 680   7                                                      while(*P!='"'&&i!=16)
 681   7                                                      {
 682   8                                                              if(*P=='\\')  //ÎŞÄÔ¹ıÂË×ªÒå×Ö·û
 683   8                                                                      ++P;
 684   8                                                              str[i++]=*P++;
 685   8                                                      }
 686   7                                                      while(*P!='"')
 687   7                                                              ++P;
 688   7                                                      ++P;//Ìø¹ı"
 689   7                                              }
 690   6                                              else
 691   6                                              {
 692   7                                                      P+=8;
 693   7                                                      isRow2=(*P++)-'0';
 694   7                                              }
 695   6                                              ++readcnt;//¶Áµ½Ò»¸ö²ÎÊı
 696   6                                              if(*P==',')
 697   6                                                      ++P;
 698   6                                      }
 699   5                                      if(readcnt==2)//²ÎÊı¶Áµ½Á½¸ö,²ÎÊıÍêÕû
 700   5                                      {
 701   6                                              LCD1602WriteLine(str,isRow2);//Ö´ĞĞ·şÎñµ÷ÓÃ
 702   6                                              CloudAct.NeedReport_ServiceReCode=200;//ÇëÇó³É¹¦
 703   6                                      }
 704   5                                      else
 705   5                                              CloudAct.NeedReport_ServiceReCode=460;//ÇëÇó²ÎÊı´íÎó
 706   5                                      CloudAct.NeedReport_Service1=true;//Service1ĞèÒª»Ø¸´
 707   5                              }
 708   4                      break;
 709   4                  case '3': //ÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ:2,Service_2:GY25Correction
 710   4                                      P=strstr(P,"{\"object\":"),P+=10;
 711   4                                      switch(*P)
 712   4                                      {
 713   5                                      case '1'://Ğ£Õı¸©Ñö½ÇºÍºá¹ö½Ç
 714   5                                              GY_25SetCmd(GY_25Correction1);break;
 715   5                                      case '2'://Ğ£Õıº½Ïò½Ç
 716   5                                              GY_25SetCmd(GY_25Correction2);break;
 717   5                                      }
 718   4                                      CloudAct.NeedReport_ServiceReCode=200;//ÇëÇó³É¹¦
 719   4                                      CloudAct.NeedReport_Service2=true;//Service2ĞèÒª»Ø¸´
 720   4                      break;
 721   4                  case '4': //ÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ:3,Service_3:MCUControl
 722   4                                      P=strstr(P,"{\"ID\":"),P+=6;
 723   4                                      switch(*P)
 724   4                                      {
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/06/2020 16:02:26 PAGE 13  

 725   5                                      case '0'://ÀëÏß
 726   5                                              CloudAct.ServiceMCUOffline=true;break;
 727   5                                      case '1'://ÀëÏßºóÖØÆôMCU
 728   5                                              CloudAct.ServiceMCURst=true;break;
 729   5                                      }
 730   4                                      CloudAct.NeedReport_ServiceReCode=200;//ÇëÇó³É¹¦
 731   4                                      CloudAct.NeedReport_Service3=true;//Service3ĞèÒª»Ø¸´
 732   4                      break;
 733   4                  case '5': //ÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ
 734   4                      break;
 735   4                  case '6': //ÔÆ¶Ëµ÷ÓÃÉè±¸·şÎñ
 736   4                      break;
 737   4                  }
 738   3              }
 739   2              else if (strncmp(CloudReceiveBuffer + 1, "MQTTEVENT", 9) == 0)
 740   2              {
 741   3                  if (CloudAct.Cmd == AT_MQTTSTART && (strncmp(CloudReceiveBuffer + 11, "CONNECT", 7) == 0))
 742   3                      if (strncmp(CloudReceiveBuffer + 19, "SUCCESS", 7) == 0)
 743   3                          CloudAct.NeedAns = false; //³É¹¦Á¬½Ó
 744   3                  if (CloudAct.Cmd == AT_MQTTSUB && (strncmp(CloudReceiveBuffer + 13, "SUBSCRIBE", 9) == 0))
 745   3                      if (strncmp(CloudReceiveBuffer + 23, "SUCCESS", 7) == 0)
 746   3                          CloudAct.NeedAns = false; //³É¹¦ÉèÖÃ¶©ÔÄ
 747   3                  if (CloudAct.Cmd == AT_MQTTSEND && (strncmp(CloudReceiveBuffer + 11, "PUBLISH", 7) == 0))
 748   3                      if (strncmp(CloudReceiveBuffer + 19, "SUCCESS", 7) == 0)
 749   3                          CloudAct.NeedAns = false; //³É¹¦·¢²¼
 750   3                  if (CloudAct.Cmd == AT_MQTTCLOSE && (strncmp(CloudReceiveBuffer + 11, "CLOSE", 5) == 0))
 751   3                      if (strncmp(CloudReceiveBuffer + 17, "SUCCESS", 7) == 0)
 752   3                          CloudAct.NeedAns = false,CloudAct.DisConectWiFi=true; //³É¹¦¶Ï¿ªÁ¬½Ó
 753   3              }
 754   2              else if (strncmp(CloudReceiveBuffer + 1, "WEVENT", 6) == 0)
 755   2              {
 756   3                  if (CloudAct.Cmd == AT_WJAP && (strncmp(CloudReceiveBuffer + 8, "STATION_UP", 10) == 0))
 757   3                      CloudAct.NeedAns = false; //³É¹¦Á¬½Ó
 758   3              }
 759   2          }
 760   1          else //¶ÁÈ¡¸½¼ÓĞÅÏ¢
 761   1          {
 762   2              //Ä¿Ç°ÓÃ²»µ½
 763   2          }
 764   1      }
 765          //------------------------------------------------------------------------------------------------//


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4030    ----
   CONSTANT SIZE    =    638    ----
   XDATA SIZE       =   1152       4
   PDATA SIZE       =   ----      31
   DATA SIZE        =      1       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
