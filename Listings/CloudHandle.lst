C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE CLOUDHANDLE
OBJECT MODULE PLACED IN .\Objects\CloudHandle.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\AlibabaCloud\CloudHandle.c OBJECTADVANCED OPTIMIZE(9,SPEED) BROWSE 
                    -MODP2 INCDIR(.\Code\Basic\def;.\Code\Basic\delay;.\Code\Basic\init;.\Code\Basic\uart;.\Code\Basic\EEPROM;.\Code\AlibabaC
                    -loud;.\Code\SubDev\DS18B20;.\Code\SubDev\GY_25;.\Code\SubDev\LCD1602;.\Code\SubDev\LED) DEBUG PRINT(.\Listings\CloudHand
                    -le.lst) OBJECT(.\Objects\CloudHandle.obj)

line level    source

   1          #include "CloudHandle.h"
   2          //------------------------------------------------------------------------------------------------//
   3          //CloudÈÎÎñ#×´Ì¬Ö¸Ê¾Æ÷
   4          xdata CloudActST CloudAct;
   5          //------------------------------------------------------------------------------------------------//
   6          //¸÷º¯Êý»º³åÇø
   7          static xdata uchar CloudReceiveBuffer[CloudReceiveBufferSize]; //´®¿ÚÊý¾Ý´¦Àí»º³åÇø-CloudReceiveº¯Êý
   8          static xdata ushort CloudReceiveIdx;                           //´®¿ÚÊý¾Ý´¦Àí»º³åÇøÏÂ±ê-CloudReceiveº¯Êý
   9          static data uchar CloudReceiveState = 0;                                           //½ÓÊÕ×´Ì¬-CloudReceiveº¯Êý
  10          static xdata uchar CloudSendBuffer[CloudSendBufferSize];       //Éú³ÉATÖ¸Áî»º³åÇø-CloudSendº¯Êý
  11          static xdata ushort CloudSendIdx;                              //Éú³ÉATÖ¸Áî»º³åÇøÏÂ±ê-CloudSendº¯Êý
  12          static xdata uchar CloudSendData[CloudSendDataSize];           //ÉÏ±¨Éè±¸ÊôÐÔ¼ÆËã»º³åÇø-CloudReportº¯Êý
  13          static xdata ushort CloudSendDataIdx;                          //¼ÇÂ¼»º³åÇøÐ´Èë´óÐ¡-CloudReportº¯Êý
  14          //------------------------------------------------------------------------------------------------//
  15          static void CloudReceive(void);       //½ÓÊÕ´®¿Ú»º³åÇøÊý¾Ý
  16          static bool CloudSend(uchar);      //·¢ËÍÃüÁîµ½´®¿Ú
  17          static void CloudReSend(uchar);        //ÖØÐÂ·¢ËÍÃüÁî
  18          static bool CloudReport(uchar);  //Éè±¸ÉÏ±¨
  19          static void CloudHandleReceive(void); //´¦ÀíCloudReceiveÊÕµ½µÄÒ»ÌõWiFiÐÅÏ¢
  20          //------------------------------------------------------------------------------------------------//
  21          void CloudLoop(void) //CloudÖ÷Ñ­»·
  22          {
  23   1          //-----------------------------WiFiÁ¬½ÓÀàÈÎÎñÈÎÎñ-----------------------------//
  24   1              if(CloudAct.DisConectWiFi==false)//WiFiÊÇ·ñÎª¿ÉÓÃ×´Ì¬
  25   1              {
  26   2                      CloudReceive(); //##½ÓÊÕ²¢´¦Àí´®¿Ú»º³åÇøÊý¾Ý
  27   2                      CloudReSend(6); //##µÈ´ý»Ø¸´600ms³¬Ê±,ÖØÐÂ·¢ËÍÃüÁî
  28   2                      //------#»ã±¨ÊÂ¼þ------//
  29   2                      if (CloudAct.NeedReport_Event_1 == true && CloudReport(1) == EXIT_SUCCESS)
  30   2                              CloudAct.NeedReport_Event_1 = false;
  31   2                      if (CloudAct.NeedReport_Event_2 == true && CloudReport(2) == EXIT_SUCCESS)
  32   2                              CloudAct.NeedReport_Event_2 = false;
  33   2                      //------#»ã±¨²ÎÊý------//
  34   2                      if (CloudAct.NeedReport == true && CloudReport(0) == EXIT_SUCCESS)
  35   2                              CloudAct.NeedReport = false,memset(&CloudAct.NeedReportT,0,sizeof(CloudAct.NeedReportT));
  36   2                      //------#Ó¦´ð·þÎñ------//
  37   2                      if (CloudAct.NeedReport_Service1 == true && CloudReport(200) == EXIT_SUCCESS)
  38   2                              CloudAct.NeedReport_Service1 = false;
  39   2                      if (CloudAct.NeedReport_Service2 == true && CloudReport(201) == EXIT_SUCCESS)
  40   2                              CloudAct.NeedReport_Service2 = false;
  41   2                      if (CloudAct.NeedReport_Service3 == true && CloudReport(202) == EXIT_SUCCESS)
  42   2                              CloudAct.NeedReport_Service3 = false;
  43   2              }
  44   1              //--------------------------------Ö´ÐÐ·þÎñÀàÈÎÎñ-------------------------------//
  45   1              if(CloudAct.ServiceMCUOffline == true||CloudAct.ServiceMCURst == true)
  46   1              {
  47   2                      static bool issend = false;
  48   2                      if(CloudAct.NeedAns==false && issend == false)//*²»ÔÚµÈ´ýÓ¦´ð×´Ì¬*,ÇÒÖ´ÐÐÒ»´Î
  49   2                      {
  50   3                              CloudAct.Cmd = AT_MQTTCLOSE;
  51   3                              if(CloudSend(2)==EXIT_SUCCESS)
  52   3                                      issend = true;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 2   

  53   3                      }
  54   2                      if(CloudAct.DisConectWiFi == true)//ÒÑÀëÏß
  55   2                      {
  56   3                              CloudAct.ServiceMCUOffline=false;//Íê³ÉMCUÀëÏßÈÎÎñ
  57   3                              if(CloudAct.ServiceMCURst == true)//Ö´ÐÐÖØÆôMCUÈÎÎñ
  58   3                              {
  59   4      #if LOGRANK_UART1 >= 2
                      printf("LOG#:CloudLoop Service:MCURST!\r\n"); //ÈÕÖ¾¼ÇÂ¼½«»áÖØÆôMCU
              #endif
  62   4                                      MCURST();
  63   4                              }
  64   3                      }
  65   2              }
  66   1              //--------------------------------×ÓÉè±¸ÀàÈÎÎñ---------------------------------//
  67   1              //------´«¸ÐÆ÷¶ÁÊý------//
  68   1          if (CloudAct.NeedReadDS18B20 == true 
  69   1                      && CloudAct.SysTime - CloudAct.NeedReadDS18B20_Ms >= DS18B20ConvertTMaxTime[DS18B20ST.ResolutionMode]
  70   1                      && DS18B20GetTemperature() == EXIT_SUCCESS)//ÐèÒª¶ÁÈ¡DS18B20ÎÂ¶ÈÖµ
  71   1                      CloudAct.NeedReadDS18B20 = false,CloudAct.NeedReadDS18B20_Ms = CloudAct.SysTime;
  72   1              if(CloudAct.NeedReadGY_25 == true && GY_25GetAzimuth() == EXIT_SUCCESS)//ÒÑ·¢ËÍ²éÑ¯Ö¸Áî,¿ªÊ¼¶ÁÈ¡·½Î»½ÇÊý¾
             -Ý
  73   1                      CloudAct.NeedReadGY_25 = false, CloudAct.NeedReadGY_25_Ms = CloudAct.SysTime;//¶ÁÈ¡³É¹¦
  74   1              //------´«¸ÐÆ÷×¼±¸------//
  75   1          if (CloudAct.NeedReadDS18B20 == false && CloudAct.SysTime - CloudAct.NeedReadDS18B20_Ms >= DS18B20Need
             -ReadMs 
  76   1                      && DS18B20ConvertTemperature() == EXIT_SUCCESS) //ÐèÒª¿ªÊ¼ÎÂ¶È×ª»»
  77   1              CloudAct.NeedReadDS18B20 = true, CloudAct.NeedReadDS18B20_Ms = CloudAct.SysTime;
  78   1              if(CloudAct.NeedReadGY_25 == false && CloudAct.SysTime - CloudAct.NeedReadGY_25_Ms >= GY_25NeedReadMs 
  79   1                      && GY_25SetCmd(GY_25Query) == EXIT_SUCCESS)//·¢ËÍ²éÑ¯Ö¸Áî
  80   1                      CloudAct.NeedReadGY_25 = true;
  81   1      }
  82          void CloudInit(void) //³õÊ¼»¯Cloud
  83          {
  84   1          memset(&CloudAct, 0, sizeof(CloudAct));                //ÇåÁãÈÎÎñÖ¸Ê¾Æ÷
  85   1          CloudSendDataIdx = CloudSendIdx = CloudReceiveIdx = 0; //¸÷»º³åÇøÏÂ±êÇåÁã
  86   1      //------------------------------------------------//
  87   1          CloudAct.Cmd = AT_REBOOT; //ÖØÆôÄ£×é
  88   1          CloudSend(2);
  89   1          while (CloudAct.NeedAns == true)
  90   1          {
  91   2              CloudReceive();
  92   2                      CloudReSend(20);//2,000msµÈ´ý
  93   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
  94   2                      {
  95   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
  96   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
  99   3                              return;
 100   3                      }
 101   2          }
 102   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-Reboot ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Ä£¿éÖØÆôÍê±Ï
              #endif
 105   1      //------------------------------------------------//
 106   1          CloudAct.Cmd = AT_WJAPQ; //¶Ï¿ªµ±Ç°WiFiÁ¬½Ó
 107   1          CloudSend(2);
 108   1          while (CloudAct.NeedAns == true)
 109   1          {
 110   2              CloudReceive();
 111   2                      CloudReSend(30);//3,000msµÈ´ý
 112   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 3   

 113   2                      {
 114   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 115   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 118   3                              return;
 119   3                      }
 120   2          }
 121   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-WiFiDisConect ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Ä£¿é¶Ï¿ªµ±Ç°WiFiÁ¬½Ó
              #endif
 124   1      //------------------------------------------------//
 125   1          CloudAct.Cmd = AT_WJAP; //Á¬½ÓÄ¿±êWiFi
 126   1          CloudSend(0);
 127   1          while (CloudAct.NeedAns == true)
 128   1          {
 129   2              CloudReceive();
 130   2                      CloudReSend(150);//15,000msµÈ´ý
 131   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 132   2                      {
 133   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 134   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 137   3                              return;
 138   3                      }
 139   2          }
 140   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-WiFiConect ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Ä¿±êWiFiÒÑÁ¬½Ó
              #endif
 143   1      //------------------------------------------------//
 144   1          CloudAct.Cmd = AT_MQTTAUTH; //ÉèÖÃMQTTÓÃ»§ÃûÃÜÂë
 145   1          CloudSend(0);
 146   1          while (CloudAct.NeedAns == true)
 147   1          {
 148   2              CloudReceive();
 149   2                      CloudReSend(22);//2,200msµÈ´ý
 150   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 151   2                      {
 152   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 153   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 156   3                              return;
 157   3                      }
 158   2          }
 159   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_UserSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÓÃ»§ÃûºÍÃÜÂëÉèÖÃÍê±Ï
              #endif
 162   1      //------------------------------------------------//
 163   1          CloudAct.Cmd = AT_MQTTSOCK; //ÉèÖÃMQTTÖ÷»úºÍ¶Ë¿Ú
 164   1          CloudSend(0);
 165   1          while (CloudAct.NeedAns == true)
 166   1          {
 167   2              CloudReceive();
 168   2                      CloudReSend(22);//2,200msµÈ´ý
 169   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 170   2                      {
 171   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 172   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 4   

 175   3                              return;
 176   3                      }
 177   2          }
 178   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_HostSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÖ÷»úºÍ¶Ë¿ÚÉèÖÃÍê±Ï
              #endif
 181   1      //------------------------------------------------//
 182   1          CloudAct.Cmd = AT_MQTTCID; //ÉèÖÃMQTT¿Í»§¶ËID
 183   1          CloudSend(0);
 184   1          while (CloudAct.NeedAns == true)
 185   1          {
 186   2              CloudReceive();
 187   2                      CloudReSend(22);//2,200msµÈ´ý
 188   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 189   2                      {
 190   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 191   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 194   3                              return;
 195   3                      }
 196   2          }
 197   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_ClintIDSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¿Í»§¶ËIDÉèÖÃÍê±Ï
              #endif
 200   1      //------------------------------------------------//
 201   1          CloudAct.Cmd = AT_MQTTKEEPALIVE; //ÉèÖÃMQTTÐÄÌøÖÜÆÚ
 202   1          CloudSend(0);
 203   1          while (CloudAct.NeedAns == true)
 204   1          {
 205   2              CloudReceive();
 206   2                      CloudReSend(22);//2,200msµÈ´ý
 207   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 208   2                      {
 209   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 210   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 213   3                              return;
 214   3                      }
 215   2          }
 216   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_HeartSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÐÄÌøÊ±¼äÉèÖÃÍê±Ï
              #endif
 219   1      //------------------------------------------------//
 220   1          CloudAct.Cmd = AT_MQTTRECONN; //ÉèÖÃMQTTÊÇ·ñ×Ô¶¯ÖØÁ¬
 221   1          CloudSend(0);
 222   1          while (CloudAct.NeedAns == true)
 223   1          {
 224   2              CloudReceive();
 225   2                      CloudReSend(22);//2,200msµÈ´ý
 226   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 227   2                      {
 228   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 229   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 232   3                              return;
 233   3                      }
 234   2          }
 235   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_AutoReConect Set ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT×Ô¶¯ÖØÁ¬ÉèÖÃÍê±Ï
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 5   

              #endif
 238   1      //------------------------------------------------//
 239   1          CloudAct.Cmd = AT_MQTTAUTOSTART; //ÉèÖÃMQTTÊÇ·ñÉÏµç×Ô¶¯¿ªÆô
 240   1          CloudSend(0);
 241   1          while (CloudAct.NeedAns == true)
 242   1          {
 243   2              CloudReceive();
 244   2                      CloudReSend(22);//2,200msµÈ´ý
 245   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 246   2                      {
 247   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 248   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 251   3                              return;
 252   3                      }
 253   2          }
 254   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_AutoStartSet ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTTÉÏµç×Ô¶¯¿ªÆôÉèÖÃÍê±Ï
              #endif
 257   1      //------------------------------------------------//
 258   1          CloudAct.Cmd = AT_MQTTSTART; //¿ªÆôMQTT
 259   1          CloudSend(2);
 260   1          while (CloudAct.NeedAns == true)
 261   1          {
 262   2              CloudReceive();
 263   2                      CloudReSend(40);//4,000msµÈ´ý
 264   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 265   2                      {
 266   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 267   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 270   3                              return;
 271   3                      }
 272   2          }
 273   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_Start ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¿ªÆô³É¹¦
              #endif
 276   1      //------------------------------------------------//
 277   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-ÊôÐÔÉèÖÃ,SubCode=1
 278   1          CloudAct.SubCode = 1;
 279   1          CloudSend(0);
 280   1          while (CloudAct.NeedAns == true)
 281   1          {
 282   2              CloudReceive();
 283   2                      CloudReSend(22);//2,200msµÈ´ý
 284   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 285   2                      {
 286   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 287   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 290   3                              return;
 291   3                      }
 292   2          }
 293   1              CloudAct.SubisBusy|=0x02;       //1ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 294   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Set ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄÊôÐÔÉèÖÃ³É¹¦
              #endif
 297   1      //------------------------------------------------//
 298   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-·þÎñ1,SubCode=2
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 6   

 299   1          CloudAct.SubCode = 2;
 300   1          CloudSend(0);
 301   1          while (CloudAct.NeedAns == true)
 302   1          {
 303   2              CloudReceive();
 304   2                      CloudReSend(22);//2,200msµÈ´ý
 305   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 306   2                      {
 307   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 308   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 311   3                              return;
 312   3                      }
 313   2          }
 314   1              CloudAct.SubisBusy|=0x04;       //2ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 315   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Service1 ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄ·þÎñ1³É¹¦
              #endif
 318   1      //------------------------------------------------//
 319   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-·þÎñ2,SubCode=3
 320   1          CloudAct.SubCode = 3;
 321   1          CloudSend(0);
 322   1          while (CloudAct.NeedAns == true)
 323   1          {
 324   2              CloudReceive();
 325   2                      CloudReSend(22);//2,200msµÈ´ý
 326   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 327   2                      {
 328   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 329   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 332   3                              return;
 333   3                      }
 334   2          }
 335   1              CloudAct.SubisBusy|=0x08;       //3ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 336   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Service2 ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄ·þÎñ2³É¹¦
              #endif
 339   1      //------------------------------------------------//
 340   1          CloudAct.Cmd = AT_MQTTSUB; //ÉèÖÃMQTT¶©ÔÄ-·þÎñ3,SubCode=4
 341   1          CloudAct.SubCode = 4;
 342   1          CloudSend(0);
 343   1          while (CloudAct.NeedAns == true)
 344   1          {
 345   2              CloudReceive();
 346   2                      CloudReSend(22);//2,200msµÈ´ý
 347   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 348   2                      {
 349   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 350   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 353   3                              return;
 354   3                      }
 355   2          }
 356   1              CloudAct.SubisBusy|=0x10;       //4ºÅSubÍ¨µÀÒÑÕ¼ÓÃ
 357   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit-MQTT_SUB_Service3 ok\r\n"); //ÈÕÖ¾¼ÇÂ¼MQTT¶©ÔÄ·þÎñ3³É¹¦
              #endif
 360   1      //------------------------------------------------//
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 7   

 361   1          CloudAct.Cmd = AT_MQTTPUB; //ÉèÖÃMQTT·¢²¼-Ä¬ÈÏÎª²ÎÊý·¢²¼PubCode=0
 362   1          CloudAct.PubCode_t = 0;
 363   1          CloudSend(0);
 364   1          while (CloudAct.NeedAns == true)
 365   1          {
 366   2              CloudReceive();
 367   2                      CloudReSend(22);//2,200msµÈ´ý
 368   2                      if(CloudAct.NeedAns_FailCount==1)//CloudReSend·ÅÆú·¢ËÍ
 369   2                      {
 370   3                              CloudAct.DisConectWiFi=true;//³õÊ¼»¯Ê§°Ü,·ÅÆúÁ¬½ÓWiFiÄ£×é,×ªÎª±¾µØ¹¤×÷Ä£Ê½
 371   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ##[Fail]##\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Ê§°Ü
              #endif
 374   3                              return;
 375   3                      }
 376   2          }
 377   1          //------------------------------------------------//
 378   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudInit ok\r\n"); //ÈÕÖ¾¼ÇÂ¼Cloud³õÊ¼»¯Íê±Ï
              #endif
 381   1      }
 382          //------------------------------------------------------------------------------------------------//
 383          static void CloudReceive(void) //½ÓÊÕ´®¿Ú»º³åÇøÊý¾Ý
 384          {
 385   1          data ushort idx1 = uart2Idx1, idx2 = uart2Idx2;
 386   1          while (idx1 != idx2)
 387   1          {
 388   2              switch (CloudReceiveState)
 389   2              {
 390   3              case 0: //µÈ´ýÖÐ
 391   3                  if (uart2Buffer[idx1] == 0x0A)
 392   3                      CloudReceiveState = 1; //µÈ´ý/r
 393   3                  break;
 394   3              case 1:                             //¶ÁÈ¡ÖÐ
 395   3                  if (uart2Buffer[idx1] == 0x0D) //·¢ÏÖ\n,½áÊø¶ÁÈ¡,ÓÉCloudHandleReceiveº¯Êý´¦Àí
 396   3                  {
 397   4                      if (CloudReceiveIdx >= 2)                      //ÃüÁî¿ÕÏ¶,»Øµ½State=1;
 398   4                      {                                              //###´Ë´¦¾ö¶¨¹ýÂË³¤¶È²»×ã2µÄÃüÁî,Ö÷ÒªÕë¶ÔMQ
             -TTSENDµÄ>
 399   5                          CloudReceiveBuffer[CloudReceiveIdx++] = 0; //·ÅÖÃ×Ö·û´®Ä©Î²,·½±ã´¦Àí
 400   5                          CloudHandleReceive();                      //´¦ÀíÊÕµ½µÄÐÅÏ¢
 401   5                      }
 402   4                      CloudReceiveState = 0; //¿ªÊ¼ÐÂµÄ½ÓÊÕ
 403   4                      CloudReceiveIdx = 0;
 404   4                      CloudReceiveBuffer[0] = 0;
 405   4                  }
 406   3                  else
 407   3                      CloudReceiveBuffer[CloudReceiveIdx++] = uart2Buffer[idx1];
 408   3                              break;
 409   3              }
 410   2              if (idx1 + 1 == uart2_buffer_size)
 411   2                  idx1 = 0;
 412   2              else
 413   2                  ++idx1;
 414   2              uart2Idx1 = idx1;
 415   2          }
 416   1      }
 417          static bool CloudSend(uchar op) //·¢ËÍÃüÁîµ½´®¿Ú
 418          {
 419   1          pdata uchar i = 0;
 420   1          if (CloudAct.NeedAns||CloudAct.DisConectWiFi==true) //ÉÐÓÐÐÅÏ¢Î´Ó¦´ð»òÁ¬½ÓÒÑ¶Ï¿ª
 421   1              return EXIT_FAILURE;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 8   

 422   1          CloudSendIdx = sprintf(CloudSendBuffer, "AT+%s", ATCmd[CloudAct.Cmd]);
 423   1          switch (op)
 424   1          {
 425   2          case 0: //ÉèÖÃ²ÎÊý
 426   2              switch (CloudAct.Cmd)
 427   2              {
 428   3              case AT_MQTTAUTH:
 429   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s,%s\r", MQTTUser, MQTTPassword);
 430   3                  break;
 431   3              case AT_MQTTSOCK:
 432   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s,%s\r", MQTTHost, MQTTPort);
 433   3                  break;
 434   3              case AT_MQTTCID:
 435   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTClientID);
 436   3                  break;
 437   3              case AT_MQTTKEEPALIVE:
 438   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTHeartBeat);
 439   3                  break;
 440   3              case AT_MQTTRECONN:
 441   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTAutoReConect);
 442   3                  break;
 443   3              case AT_MQTTAUTOSTART:
 444   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s\r", MQTTAutoStart);
 445   3                  break;
 446   3              case AT_MQTTSUB:
 447   3                      {
 448   4                              if(CloudAct.SubCode == 0)
 449   4                                      ;
 450   4                              else if(CloudAct.SubCode == 1)
 451   4                                      sprintf(CloudSendBuffer + CloudSendIdx, "=" SubscribeSet2 "\r",
 452   4                                              CloudAct.SubCode,ProductKey, DeviceName);
 453   4                              else
 454   4                              {
 455   5                                      pdata uchar *P;
 456   5                                      switch(CloudAct.SubCode)
 457   5                                      {
 458   6                                      case 2://¶©ÔÄÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ1
 459   6                                              P=Service_1;break;
 460   6                                      case 3://¶©ÔÄÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ2
 461   6                                              P=Service_2;break;
 462   6                                      case 4://¶©ÔÄÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ3
 463   6                                              P=Service_3;break;
 464   6                                      }
 465   5                                      sprintf(CloudSendBuffer + CloudSendIdx, "=" SubscribeSet4 "\r",
 466   5                                              CloudAct.SubCode,ProductKey, DeviceName,P);
 467   5                              }
 468   4                      }
 469   3                  break;
 470   3              case AT_MQTTPUB:
 471   3                  switch (CloudAct.PubCode_t) //Ä¿±êPub
 472   3                  {
 473   4                  case 0: //Éè±¸ÊôÐÔÉÏ±¨
 474   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet1 "\r",ProductKey, DeviceName);
 475   4                      break;
 476   4                  case 1: //Éè±¸ÊÂ¼þÉÏ±¨,Event_1:WaterTemperatureLow
 477   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet2 "\r",ProductKey, DeviceName, Event
             -_1);
 478   4                      break;
 479   4                  case 2: //Éè±¸ÊÂ¼þÉÏ±¨,Event_2:WaterTemperatureHigh
 480   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet2 "\r",ProductKey, DeviceName, Event
             -_2);
 481   4                      break;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 9   

 482   4                  case 200://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ1,Service_1:LCD1602Display
 483   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet3 "\r",ProductKey, DeviceName, Servi
             -ce_1);
 484   4                      break;
 485   4                              case 201://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ2,Service_2:GY25Correction
 486   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet3 "\r",ProductKey, DeviceName, Servi
             -ce_2);
 487   4                      break;
 488   4                              case 202://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ3,Service_3:MCUControl
 489   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=" PublishSet3 "\r",ProductKey, DeviceName, Servi
             -ce_3);
 490   4                      break;
 491   4                  }
 492   3                  break;
 493   3              case AT_MQTTSEND:
 494   3                  switch (CloudAct.PubCode) //µ±Ç°Pub
 495   3                  {
 496   4                  case 0: //Éè±¸ÊôÐÔÉÏ±¨
 497   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet1 "\r",
 498   4                              SendSet1Len + CloudSendDataIdx, CloudAct.MQTTSENDid, CloudSendData);
 499   4                      break;
 500   4                  case 1: //Éè±¸ÊÂ¼þÉÏ±¨,Event_1:WaterTemperatureLow
 501   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet2 "\r",
 502   4                              SendSet2Len + Event_1_Len + CloudSendDataIdx, CloudAct.MQTTSENDid, CloudSendData, 
             -Event_1);
 503   4                      break;
 504   4                  case 2: //Éè±¸ÊÂ¼þÉÏ±¨,Event_2:WaterTemperatureHigh
 505   4                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet2 "\r",
 506   4                              SendSet2Len + Event_2_Len + CloudSendDataIdx, CloudAct.MQTTSENDid, CloudSendData, 
             -Event_2);
 507   4                      break;
 508   4                              case 200://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ1,Service_1:LCD1602Display
 509   4                              case 201://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ2,Service_2:GY25Correction
 510   4                              case 202://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ3,Service_3:MCUControl
 511   4                                      sprintf(CloudSendBuffer + CloudSendIdx, "=%u\r" SendSet3 "\r",
 512   4                              SendSet3Len + CloudAct.SubIdLen + CloudSendDataIdx,
 513   4                                                      CloudAct.SubId,CloudAct.NeedReport_ServiceReCode,CloudSendData);
 514   4                                      break;
 515   4                  }
 516   3                              if(CloudAct.PubCode<200)//·ÇÏìÓ¦·þÎñµ÷ÓÃ
 517   3                                      ++CloudAct.MQTTSENDid;//±¾µØidºÅ¸üÐÂ
 518   3                  break; //MQTTSEND
 519   3              case AT_WJAP:
 520   3                  sprintf(CloudSendBuffer + CloudSendIdx, "=%s,%s\r", WiFiSSID, WiFiPassword);
 521   3                  break;
 522   3              default:
 523   3                  break;
 524   3              }
 525   2              break;
 526   2          case 3:
 527   2              CloudSendBuffer[CloudSendIdx++] = '='; //²éÑ¯ÓÃ»§ÉèÖÃµÄ²ÎÊý
 528   2          case 1:
 529   2              CloudSendBuffer[CloudSendIdx++] = '?'; //²éÑ¯ÏµÍ³²ÎÊý
 530   2          case 2:
 531   2              CloudSendBuffer[CloudSendIdx++] = '\r'; //Ö´ÐÐÃüÁî
 532   2              CloudSendBuffer[CloudSendIdx++] = 0;
 533   2              break;
 534   2          }
 535   1      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudSend$%s\r\n", CloudSendBuffer);
              #endif
 538   1          uart2_sendstr8(CloudSendBuffer);       //·¢ËÍ×¼±¸ºÃµÄÃüÁî×Ö·û´®
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 10  

 539   1          CloudAct.NeedAns = true;                  //¿ªÊ¼µÈ´ýÓ¦´ð
 540   1          CloudAct.NeedAns_Time = CloudAct.SysTime; //¼ÇÂ¼·¢ËÍÃüÁîÊ±¼ä
 541   1              CloudAct.NeedAns_Count = 0;
 542   1          return EXIT_SUCCESS;
 543   1      }
 544          static void CloudReSend(uchar Time)
 545          {
 546   1              xdata ulong Timex=Time;
 547   1              Timex*=100;
 548   1              if(CloudAct.NeedAns==false || CloudAct.DisConectWiFi==true)//²»ÊÇµÈ´ýÓ¦´ð×´Ì¬»òÁ¬½ÓÒÑ¶Ï¿ª
 549   1                      return;
 550   1              if(CloudAct.SysTime-CloudAct.NeedAns_Time>=Timex)//µÈ´ýÓ¦´ð³¬Ê±
 551   1              {
 552   2                      if(CloudAct.NeedAns_Count==2)//ÒÑ¾­ÖØÐÂ·¢ËÍÁ½´Î
 553   2                      {
 554   3                              CloudAct.NeedAns=false;//·ÅÆúÖØÐÂ·¢ËÍ,È¡ÏûµÈ´ýÓ¦´ð×´Ì¬
 555   3                              ++CloudAct.NeedAns_FailCount;
 556   3      #if LOGRANK_UART1 >= 2
                      printf("LOG#:CloudReSend abandon,FailCount:%bu\r\n",CloudAct.NeedAns_FailCount);
              #endif
 559   3                              if(CloudAct.NeedAns_FailCount==3)//Ê§°Ü3´Î,¿ªÊ¼ÑéÖ¤Ä£×éÊÇ·ñÔÚÏß
 560   3                              {
 561   4                                      ushort TempT;
 562   4      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend check WiFi isOnline?\r\n");
              #endif
 565   4                                      CloudAct.Cmd = 0xFF;//·ÀÖ¹×èÈûok
 566   4                                      uart2_sendstr8("\rAT\r");//·¢ËÍATÑéÖ¤
 567   4                                      TempT = CloudAct.SysTime; //¼ÇÂ¼ÃüÁî·¢ËÍÊ±¼ä
 568   4                                      CloudAct.NeedAns=true;
 569   4                                      while (CloudAct.NeedAns == true)
 570   4                                      {
 571   5                                              CloudReceive();
 572   5                                              if (CloudAct.SysTime - TempT >= 3500) //3500msÃ»ÓÐ»Ø¸´
 573   5                                              {
 574   6      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend check WiFi isOnline - No,DisConect Now\r\n");
              #endif
 577   6                                                      CloudAct.DisConectWiFi=true;
 578   6                                                      IE2 &= ~ES2;//¹Ø±Õ´®¿Ú2ÖÐ¶Ï
 579   6                                                      return;//Ä£×é¶Ï¿ªÁ¬½Ó,²»ÔÙÁ¬½ÓÄ£×é
 580   6                                              }
 581   5                                      }
 582   4      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend check WiFi isOnline - Yes,Restart MCU\r\n");
              #endif
 585   4                                      MCURST();//Í¨¹ýÑéÖ¤,ÖØÆôMCUÊÔÍ¼ÖØÐÂÆ¥ÅäÄ£×é×´Ì¬
 586   4                              }
 587   3                      }
 588   2                      else
 589   2                      {
 590   3      #if LOGRANK_UART1 >= 2
                  printf("LOG#:CloudReSend$%s,Cnt$%bu\r\n", CloudSendBuffer,CloudAct.NeedAns_Count+1);
              #endif
 593   3                              uart2_sendstr8(CloudSendBuffer);//ÖØÐÂ·¢ËÍ
 594   3                              CloudAct.NeedAns_Time = CloudAct.SysTime;//¸üÐÂ·¢ËÍÊ±¼ä
 595   3                              ++CloudAct.NeedAns_Count;//¼ÆÊýÖØÐÂ·¢ËÍ´ÎÊý
 596   3                      }
 597   2              }
 598   1      }
 599          static bool CloudReport(uchar Code) //Éè±¸ÉÏ±¨
 600          {
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 11  

 601   1          if (CloudAct.NeedAns||CloudAct.DisConectWiFi==true) //ÉÐÓÐÐÅÏ¢Î´Ó¦´ð,»òÄ£×é¶Ï¿ª×´Ì¬
 602   1              return EXIT_FAILURE;
 603   1          if (Code == 0)
 604   1          {
 605   2              if (CloudAct.PubCode != 0) //PubÎ´ÕýÈ·ÇÐ»»,ÇÐ»»ºó·µ»Ø
 606   2              {
 607   3                  if (CloudAct.PubCode_t != 0) //PubÎ´¿ªÊ¼¿ªÊ¼ÇÐ»»µ½Pub=0
 608   3                  {
 609   4                      CloudAct.Cmd = AT_MQTTPUB;
 610   4                      CloudAct.PubCode_t = 0; //±êÖ¾ÒÑ¾­¿ªÊ¼ÇÐ»»
 611   4                      CloudSend(0);           //ÇÐ»»µ½Éè±¸ÊôÐÔPub
 612   4                  }
 613   3                  return EXIT_FAILURE;
 614   3              }
 615   2                      CloudSendDataIdx = 0;
 616   2                      if(CloudAct.NeedReportT.GY_25 == true)
 617   2                              CloudSendDataIdx += sprintf(CloudSendData, "\"HeadAngle\":%.2f,\"PitchAngle\":%.2f,\"RollAngle\":%.2f",
 618   2                              GY_25ST.HeadAngle/100.0,GY_25ST.PitchAngle/100.0,GY_25ST.RollAngle/100.0);
 619   2                      if(CloudAct.NeedReportT.DS18B20 == true)
 620   2                      {
 621   3                              if(CloudSendDataIdx)
 622   3                                      CloudSendData[CloudSendDataIdx++]=',';
 623   3                              CloudSendDataIdx += sprintf(CloudSendData+CloudSendDataIdx, "\"WaterTemperature\":%.3f",
 624   3                                         (DS18B20ST.TemperatureData) * DS18B20ReTransfrom[DS18B20ST.ResolutionMo
             -de] + (float)DS18B20MinT);
 625   3                      }
 626   2                      if(CloudAct.NeedReportT.LED1 == true)
 627   2                      {
 628   3                              if(CloudSendDataIdx)
 629   3                                      CloudSendData[CloudSendDataIdx++]=',';
 630   3                              CloudSendDataIdx += sprintf(CloudSendData+CloudSendDataIdx, "\"LED1\":%bu",LEDRead(1));
 631   3                      }
 632   2                      if(CloudAct.NeedReportT.LED2 == true)
 633   2                      {
 634   3                              if(CloudSendDataIdx)
 635   3                                      CloudSendData[CloudSendDataIdx++]=',';
 636   3                              CloudSendDataIdx += sprintf(CloudSendData+CloudSendDataIdx, "\"LED2\":%bu",LEDRead(2));
 637   3                      }
 638   2                      if(CloudAct.NeedReportT.LED3 == true)
 639   2                      {
 640   3                              if(CloudSendDataIdx)
 641   3                                      CloudSendData[CloudSendDataIdx++]=',';
 642   3                              CloudSendDataIdx += sprintf(CloudSendData+CloudSendDataIdx, "\"LED3\":%bu",LEDRead(3));
 643   3                      }
 644   2                      if(CloudAct.NeedReportT.IsStorageLED == true)
 645   2                      {
 646   3                              if(CloudSendDataIdx)
 647   3                                      CloudSendData[CloudSendDataIdx++]=',';
 648   3                              CloudSendDataIdx += sprintf(CloudSendData+CloudSendDataIdx, "\"IsStorageLED\":%bu",LEDRead(4));
 649   3                      }
 650   2              }
 651   1          else
 652   1          {
 653   2              if (CloudAct.PubCode != Code) //PubÎ´ÕýÈ·ÇÐ»»
 654   2              {
 655   3                              pdata uchar TempFailCount = CloudAct.NeedAns_FailCount;
 656   3                  CloudAct.Cmd = AT_MQTTPUB;
 657   3                  CloudAct.PubCode_t = Code;       //±êÖ¾ÒÑ¾­¿ªÊ¼ÇÐ»»
 658   3                  CloudSend(0);                    //ÇÐ»»µ½Éè±¸ÊôÐÔPub
 659   3                  while (CloudAct.NeedAns == true)
 660   3                              {
 661   4                                      CloudReceive();
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 12  

 662   4                                      CloudReSend(5);//500msµÈ´ý
 663   4                                      if(CloudAct.NeedAns_FailCount==TempFailCount+1)//CloudReSend·ÅÆú·¢ËÍ
 664   4                                              return EXIT_FAILURE;//Pub×ª»»Ê§°Ü
 665   4                              }
 666   3              }
 667   2              switch (Code)
 668   2              {
 669   3              case 1://Éè±¸ÊÂ¼þÉÏ±¨,Event_1:WaterTemperatureLow
 670   3                  CloudSendDataIdx = sprintf(CloudSendData, "\"Error\":%bu",DS18B20ST.TemperatureLow);break;
 671   3              case 2://Éè±¸ÊÂ¼þÉÏ±¨,Event_2:WaterTemperatureHigh
 672   3                  CloudSendDataIdx = sprintf(CloudSendData, "\"Error\":%bu",DS18B20ST.TemperatureHigh);break;
 673   3                      case 200://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ1,Service_1:LCD1602Display
 674   3                      case 201://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ2,Service_2:GY25Correction
 675   3                      case 202://ÉèÖÃÏìÓ¦·þÎñµ÷ÓÃ3,Service_3:MCUControl       
 676   3                              CloudSendDataIdx = sprintf(CloudSendData, "");//Ã»ÓÐ·µ»Ø²ÎÊý
 677   3                  break;
 678   3              }
 679   2          }
 680   1          CloudAct.Cmd = AT_MQTTSEND; //ÒÑÐ´ÈëÉè±¸´ýÉÏ±¨ÊôÐÔ,×¼±¸·¢²¼
 681   1          CloudSend(0);
 682   1          return EXIT_SUCCESS;
 683   1      }
 684          static void CloudHandleReceive(void)
 685          {
 686   1      #if LOGRANK_UART1 >= 3
                  printf("LOG:HandleReceive$%s\r\n", CloudReceiveBuffer);
              #endif
 689   1          if (strncmp(CloudReceiveBuffer, "ERROR", 5) == 0) //ÃüÁîÖ´ÐÐÒì³£
 690   1          {
 691   2              //Ä¿Ç°²»´¦Àí,´ýÍêÉÆ
 692   2          }
 693   1          else if (strncmp(CloudReceiveBuffer, "OK", 2) == 0) //ÃüÁîÖ´ÐÐÕý³£
 694   1          {
 695   2              if (CloudAct.Cmd != AT_MQTTSTART && CloudAct.Cmd != AT_MQTTSEND 
 696   2                              && CloudAct.Cmd != AT_MQTTSUB && CloudAct.Cmd != AT_WJAP
 697   2                              && CloudAct.Cmd != AT_MQTTCLOSE)
 698   2              {
 699   3                  CloudAct.NeedAns = false;
 700   3                  if (CloudAct.Cmd == AT_MQTTPUB)
 701   3                      CloudAct.PubCode = CloudAct.PubCode_t; //ÇÐ»»PubÍê±Ï
 702   3              }
 703   2          }
 704   1          else if (CloudReceiveBuffer[0] == '+') //¶ÁÈ¡ÏêÏ¸ÐÅÏ¢
 705   1          {
 706   2              if (strncmp(CloudReceiveBuffer + 1, "MQTTRECV", 8) == 0) //ÊÕµ½¶©ÔÄÐÅÏ¢
 707   2              {
 708   3                              pdata uchar *P=CloudReceiveBuffer+16;//´ÓÕâÀï¿ªÊ¼²éÕÒidºÍparams
 709   3                              pdata uchar i=0;
 710   3                              P=strstr(P,"\"id\":\""),P+=6;
 711   3                              while(*P!='"')  //Ñ¡ÓÃ"×÷Îª½áÊø±êÖ¾
 712   3                                      CloudAct.SubId[i++]=*P++;
 713   3                              CloudAct.SubIdLen=i;
 714   3                  switch (CloudReceiveBuffer[10]) //ÅÐ¶Ï¶©ÔÄµÄÍ¨µÀ
 715   3                  {
 716   4                  case '0': //ÔÆ¶ËÏìÓ¦ÊôÐÔÉÏ±¨,ÔÆ¶ËÏìÓ¦ÊÂ¼þÉÏ±¨-³£±ÕÍ¨µÀ
 717   4                      break;
 718   4                  case '1': //ÔÆ¶ËÉèÖÃÉè±¸ÊôÐÔ
 719   4                                      P=strstr(P,"\"params\":{\""),P+=11;
 720   4                              {
 721   5                                      pdata uchar name[16],i=0;
 722   5                                      while(*P != '"'&&i!=15)
 723   5                                              name[i++]=*P++;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 13  

 724   5                                      name[i]=0;
 725   5                                      P+=2;
 726   5                                      if(strncmp(name,"LED1",4) == 0)
 727   5                                              LEDWrite(1,(*P=='1')?LEDOpen:LEDClose);
 728   5                                      else if(strncmp(name,"LED2",4) == 0)
 729   5                                              LEDWrite(2,(*P=='1')?LEDOpen:LEDClose);
 730   5                                      else if(strncmp(name,"LED3",4) == 0)
 731   5                                              LEDWrite(3,(*P=='1')?LEDOpen:LEDClose);
 732   5                                      else if(strncmp(name,"IsStorageLED",12) == 0)
 733   5                                              LEDWrite(4,*P=='1');
 734   5                              }
 735   4                      break;
 736   4                  case '2': //ÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ:1,Service_1:LCD1602Display
 737   4                              {
 738   5                                      pdata uchar *Pend=strstr(P,"},\"version\":\"1.0.0\"}");//ÕÒÑ°Ä©Î²}
 739   5                                      bool isRow2;
 740   5                                      pdata uchar str[17]="                ",readcnt=0;//±£Ö¤16¸ö×Ö·û,Ë¢ÐÂÊ£Óà²¿·ÖÎª¿Õ°×
 741   5                                      P=strstr(P,"\"params\":{"),P+=10;
 742   5                                      while(P!=Pend)
 743   5                                      {
 744   6                                              ++P;//Ìø¹ý"
 745   6                                              if(strncmp(P,"Text",4)==0)
 746   6                                              {
 747   7                                                      pdata uchar i=0;
 748   7                                                      P+=7;
 749   7                                                      while(*P!='"'&&i!=16)
 750   7                                                      {
 751   8                                                              if(*P=='\\')  //ÎÞÄÔ¹ýÂË×ªÒå×Ö·û
 752   8                                                                      ++P;
 753   8                                                              str[i++]=*P++;
 754   8                                                      }
 755   7                                                      while(*P!='"')
 756   7                                                              ++P;
 757   7                                                      ++P;//Ìø¹ý"
 758   7                                              }
 759   6                                              else
 760   6                                              {
 761   7                                                      P+=8;
 762   7                                                      isRow2=(*P++)-'0';
 763   7                                              }
 764   6                                              ++readcnt;//¶Áµ½Ò»¸ö²ÎÊý
 765   6                                              if(*P==',')
 766   6                                                      ++P;
 767   6                                      }
 768   5                                      if(readcnt==2)//²ÎÊý¶Áµ½Á½¸ö,²ÎÊýÍêÕû
 769   5                                      {
 770   6                                              LCD1602WriteLine(str,isRow2);//Ö´ÐÐ·þÎñµ÷ÓÃ
 771   6                                              CloudAct.NeedReport_ServiceReCode=200;//ÇëÇó³É¹¦
 772   6                                      }
 773   5                                      else
 774   5                                              CloudAct.NeedReport_ServiceReCode=460;//ÇëÇó²ÎÊý´íÎó
 775   5                                      CloudAct.NeedReport_Service1=true;//Service1ÐèÒª»Ø¸´
 776   5                              }
 777   4                      break;
 778   4                  case '3': //ÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ:2,Service_2:GY25Correction
 779   4                                      P=strstr(P,"{\"object\":"),P+=10;
 780   4                                      switch(*P)
 781   4                                      {
 782   5                                      case '1'://Ð£Õý¸©Ñö½ÇºÍºá¹ö½Ç
 783   5                                              GY_25SetCmd(GY_25Correction1);break;
 784   5                                      case '2'://Ð£Õýº½Ïò½Ç
 785   5                                              GY_25SetCmd(GY_25Correction2);break;
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 14  

 786   5                                      }
 787   4                                      CloudAct.NeedReport_ServiceReCode=200;//ÇëÇó³É¹¦
 788   4                                      CloudAct.NeedReport_Service2=true;//Service2ÐèÒª»Ø¸´
 789   4                      break;
 790   4                  case '4': //ÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ:3,Service_3:MCUControl
 791   4                                      P=strstr(P,"{\"ID\":"),P+=6;
 792   4                                      switch(*P)
 793   4                                      {
 794   5                                      case '0'://ÀëÏß
 795   5                                              CloudAct.ServiceMCUOffline=true;break;
 796   5                                      case '1'://ÀëÏßºóÖØÆôMCU
 797   5                                              CloudAct.ServiceMCURst=true;break;
 798   5                                      }
 799   4                                      CloudAct.NeedReport_ServiceReCode=200;//ÇëÇó³É¹¦
 800   4                                      CloudAct.NeedReport_Service3=true;//Service3ÐèÒª»Ø¸´
 801   4                      break;
 802   4                  case '5': //ÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ
 803   4                      break;
 804   4                  case '6': //ÔÆ¶Ëµ÷ÓÃÉè±¸·þÎñ
 805   4                      break;
 806   4                  }
 807   3              }
 808   2              else if (strncmp(CloudReceiveBuffer + 1, "MQTTEVENT", 9) == 0)
 809   2              {
 810   3                  if (CloudAct.Cmd == AT_MQTTSTART && (strncmp(CloudReceiveBuffer + 11, "CONNECT", 7) == 0))
 811   3                      if (strncmp(CloudReceiveBuffer + 19, "SUCCESS", 7) == 0)
 812   3                          CloudAct.NeedAns = false; //³É¹¦Á¬½Ó
 813   3                  if (CloudAct.Cmd == AT_MQTTSUB && (strncmp(CloudReceiveBuffer + 13, "SUBSCRIBE", 9) == 0))
 814   3                      if (strncmp(CloudReceiveBuffer + 23, "SUCCESS", 7) == 0 && *(CloudReceiveBuffer+11)-'0' ==
             - CloudAct.SubCode)
 815   3                          CloudAct.NeedAns = false; //³É¹¦ÉèÖÃ¶©ÔÄ
 816   3                  if (CloudAct.Cmd == AT_MQTTSEND && (strncmp(CloudReceiveBuffer + 11, "PUBLISH", 7) == 0))
 817   3                      if (strncmp(CloudReceiveBuffer + 19, "SUCCESS", 7) == 0)
 818   3                          CloudAct.NeedAns = false; //³É¹¦·¢²¼
 819   3                  if (CloudAct.Cmd == AT_MQTTCLOSE && (strncmp(CloudReceiveBuffer + 11, "CLOSE", 5) == 0))
 820   3                      if (strncmp(CloudReceiveBuffer + 17, "SUCCESS", 7) == 0)
 821   3                          CloudAct.NeedAns = false,CloudAct.DisConectWiFi=true; //³É¹¦¶Ï¿ªÁ¬½Ó
 822   3              }
 823   2              else if (strncmp(CloudReceiveBuffer + 1, "WEVENT", 6) == 0)
 824   2              {
 825   3                  if (CloudAct.Cmd == AT_WJAP && (strncmp(CloudReceiveBuffer + 8, "STATION_UP", 10) == 0))
 826   3                      CloudAct.NeedAns = false; //³É¹¦Á¬½Ó
 827   3              }
 828   2          }
 829   1          else //¶ÁÈ¡¸½¼ÓÐÅÏ¢
 830   1          {
 831   2              //Ä¿Ç°ÓÃ²»µ½
 832   2          }
 833   1      }
 834          //------------------------------------------------------------------------------------------------//


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6539    ----
   CONSTANT SIZE    =    776    ----
   XDATA SIZE       =   1552       4
   PDATA SIZE       =   ----      48
   DATA SIZE        =      1       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
C51 COMPILER V9.59.0.0   CLOUDHANDLE                                                       05/08/2020 12:19:53 PAGE 15  

   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
